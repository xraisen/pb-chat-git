// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model CustomerToken {
  id              String    @id
  conversationId  String
  accessToken     String
  refreshToken    String?
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([conversationId])
}

model CodeVerifier {
  id              String    @id
  state           String    @unique
  verifier        String
  createdAt       DateTime  @default(now())
  expiresAt       DateTime

  @@index([state])
}

model Conversation {
  id        String    @id
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String       // "user" or "assistant"
  content        String
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}

model CustomerAccountUrl {
  id             String    @id @default(cuid())
  conversationId String    @unique
  url            String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model ShopChatbotConfig {
  id                      String    @id @default(cuid())
  shop                    String    @unique
  
  // LLM and API Key settings (existing)
  llmProvider             String?   @default("gemini")
  geminiApiKey            String? // Encrypted
  claudeApiKey            String? // Encrypted

  // Chatbot Persona & Behavior
  botName                 String?   @default("Store Assistant")
  welcomeMessage          String?   @default("ðŸ‘‹ Hi there! How can I help you today?")
  systemPromptKey         String?   @default("standardAssistant") // Key for a predefined prompt
  customSystemPrompt      String?   @db.Text // For potentially longer custom prompts
  promptHeadOverride      String?   @db.Text // For prepending to the final system prompt
  promptTailOverride      String?   @db.Text // For appending to the final system prompt
  
  // Chat Widget Appearance & Positioning
  width                   String?   @default("450px")
  height                  String?   @default("70vh")
  zIndex                  String?   @default("9999")
  position                String?   @default("right") // e.g., "left", "right"
  bgColor                 String?   @default("#FFFFFF")
  textColor               String?   @default("#333333")
  buttonColor             String?   @default("#E57399")
  headerBgColor           String?   @default("#E57399")
  headerTextColor         String?   @default("#FFFFFF")
  userMsgBgColor          String?   @default("#E57399")
  userMsgTextColor        String?   @default("#FFFFFF")
  assistantMsgBgColor     String?   @default("#F8F9FA")
  assistantMsgTextColor   String?   @default("#333333")
  customCSS               String?   @db.Text
  avatarUrl               String?   // URL to an avatar image for the assistant

  // Product Display
  productDisplayMode      String?   @default("card") // "card", "carousel", "combo"
  maxProductsToDisplay    Int?      @default(3)
  carouselItemWidth       String?   @default("180px")

  // Chat Bubble Appearance
  chatBubbleIcon          String?   @default("default") // "default", "question", "custom"
  customChatBubbleSVG     String?   @db.Text // For custom SVG icon
  chatBubbleSize          String?   @default("60px")
  chatBubbleColor         String?   @default("#E57399")

  // UTM Parameters for link generation
  utmSource               String?
  utmMedium               String?
  utmCampaign             String?
  utmTerm                 String?
  utmContent              String?

  // Timestamps (existing)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model ChatInteractionLog {
  id             String   @id @default(cuid())
  shop           String   // Shop domain or ID to associate the log with the shop
  conversationId String   // To group messages/events belonging to the same conversation
  eventType      String   // Type of event, e.g., "CHAT_OPENED", "USER_MESSAGE_SENT", "TOOL_CALL_SEARCH_SHOP_CATALOG"
  eventDetail    Json?    // Optional: additional details specific to the event, e.g., { productId: "...", quantity: 1 }
  timestamp      DateTime @default(now()) // When the event occurred

  @@index([shop, timestamp]) // Index for querying logs by shop and time
  @@index([conversationId])  // Index for querying logs by conversation
}

model PromotionalMessage {
  id             String   @id @default(cuid())
  shop           String
  message        String   @db.Text // Potentially long messages
  triggerType    String   // e.g., "FIRST_VISIT", "CART_ABANDONMENT_ATTEMPT", "PAGE_URL", "TIME_ON_SITE"
  triggerValue   String?  // e.g., URL pattern for PAGE_URL, number of seconds for TIME_ON_SITE
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([shop, isActive])
}

model MessageFeedback {
  id             String   @id @default(cuid())
  shop           String
  conversationId String
  messageContent String   @db.Text // Store a snippet or hash of the message for context
  rating         String   // "UP" or "DOWN"
  comment        String?  @db.Text // Optional textual feedback
  timestamp      DateTime @default(now())

  @@index([shop, timestamp])
  @@index([conversationId])
}

model PromotionalProduct {
  id             String   @id @default(cuid())
  shop           String
  productId      String   // Shopify Product GID, e.g., "gid://shopify/Product/12345"
  triggerType    String   // e.g., "RELATED_CATEGORY", "ON_CART_PAGE", "TIME_CAMPAIGN"
  triggerValue   String?  // e.g., category name, campaign name
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([shop, isActive])
}
