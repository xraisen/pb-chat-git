{{ 'chat.css' | asset_url | stylesheet_tag }}
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<div class="shop-ai-chat-container">
  <div class="shop-ai-chat-bubble" style="background-color: {{ block.settings.chat_bubble_color }}">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
    </svg>
  </div>

  <div class="shop-ai-chat-window">
    <div class="shop-ai-chat-header">
      <img src="" alt="Chatbot Avatar" class="shop-ai-chat-avatar" style="display:none; width: 30px; height: 30px; border-radius: 50%; margin-right: 8px;" />
      <div class="shop-ai-chat-header-title">{{ 'chat.title' | t }}</div>
      <button class="shop-ai-chat-close">âœ•</button>
    </div>

    <div class="shop-ai-chat-messages">
      <!-- Messages will be added here by JavaScript -->
    </div>

    <div class="shop-ai-chat-input">
      <input type="text" placeholder="{{ 'chat.inputPlaceholder' | t }}">
      <button class="shop-ai-chat-send">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
      </button>
    </div>
  </div>
</div>

<script src="{{ 'chat.js' | asset_url }}" defer></script>
<script>
  // Initialize with Liquid block settings as fallbacks
  window.shopChatConfig = {
    // UI related settings from block schema (will be overridden by API if successful)
    chatBubbleColor: {{ block.settings.chat_bubble_color | json }},
    welcomeMessage: {{ block.settings.welcome_message | json }},

    // Non-UI settings that might be relevant as fallbacks or for initial state
    promptType: {{ block.settings.system_prompt | json }}, // Will be overridden by API's systemPromptKey
    llmProvider: {{ block.settings.llm_provider | json }}, // API doesn't send this, server handles LLM choice

    // Default values for settings expected from API, in case API fails
    botName: "Store Assistant",
    systemPromptKey: {{ block.settings.system_prompt | json }}, // Fallback to this if API fails
    customSystemPrompt: "",
    width: "450px",
    height: "70vh",
    zIndex: "9999",
    position: "right",
    bgColor: "#FFFFFF",
    textColor: "#333333",
    buttonColor: "#E57399",
    headerBgColor: "#E57399",
    headerTextColor: "#FFFFFF",
    userMsgBgColor: "#E57399",
    userMsgTextColor: "#FFFFFF",
    assistantMsgBgColor: "#F8F9FA",
    assistantMsgTextColor: "#333333",
    customCSS: "",
    avatarUrl: "",
    productDisplayMode: "card",
    maxProductsToDisplay: 3,
    carouselItemWidth: "180px",
    chatBubbleIcon: "default",
    customChatBubbleSVG: "",
    chatBubbleSize: "60px"
    // Note: chatBubbleColor is already above from block.settings
  };

  window.shopId = {{ shop.id }};
  window.shopAiApiBaseUrl = {{ app.url | json }}; // Base URL for chat API etc.

  async function fetchChatConfigAndInit() {
    const apiUrl = `{{ app.url }}/api/chat-config?shop={{ shop.myshopify_domain | url_encode }}`;
    console.log('Shop AI Chat: Fetching config from', apiUrl);

    try {
      const response = await fetch(apiUrl);
      if (response.ok) {
        const apiResponse = await response.json();
        if (apiResponse.config) {
          // Merge fetched config. API values take precedence.
          window.shopChatConfig = { ...window.shopChatConfig, ...apiResponse.config };
          console.log('Shop AI Chat: Config loaded from API and merged.', window.shopChatConfig);
        } else if (apiResponse.error) {
          console.error('Shop AI Chat: Failed to load config from API - API Error:', apiResponse.error);
        } else {
          console.error('Shop AI Chat: Failed to load config from API - Unknown API issue.');
        }
      } else {
        console.error('Shop AI Chat: Failed to fetch config, HTTP status:', response.status);
      }
    } catch (error) {
      console.error('Shop AI Chat: Exception while fetching chat config:', error);
    } finally {
      // Initialize chat regardless of API success, using merged or fallback config
      if (typeof ShopAIChat !== 'undefined' && ShopAIChat.init) {
        ShopAIChat.init(); // ShopAIChat.init() should now use window.shopChatConfig
        console.log('Shop AI Chat: Initialized.');
      } else {
        // This might happen if chat.js hasn't loaded yet.
        // Consider a retry mechanism or ensure chat.js loads before DOMContentLoaded fully completes.
        console.error('Shop AI Chat: ShopAIChat.init not found. Chat cannot be initialized.');
      }
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', fetchChatConfigAndInit);
  } else {
    // DOMContentLoaded has already fired
    fetchChatConfigAndInit();
  }
</script>

{% schema %}
{
  "name": "AI Chat Assistant",
  "target": "body",
  "settings": [
    {
      "type": "color",
      "id": "chat_bubble_color",
      "label": "Chat Bubble Color",
      "default": "#5046e4"
    },
    {
      "type": "text",
      "id": "welcome_message",
      "label": "Welcome Message",
      "default": "ðŸ‘‹ Hi there! How can I help you today?"
    },
    {
      "type": "select",
      "id": "system_prompt",
      "label": "System Prompt",
      "options": [
        {
          "value": "standardAssistant",
          "label": "Standard Assistant"
        },
        {
          "value": "enthusiasticAssistant",
          "label": "Enthusiastic Assistant"
        }
      ],
      "default": "standardAssistant"
    },
    {
      "type": "select",
      "id": "llm_provider",
      "label": "LLM Provider",
      "options": [
        {
          "value": "claude",
          "label": "Claude"
        },
        {
          "value": "gemini",
          "label": "Gemini"
        }
      ],
      "default": "gemini"
    }
  ]
}
{% endschema %}
